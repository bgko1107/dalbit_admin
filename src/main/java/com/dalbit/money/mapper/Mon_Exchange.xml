<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalbit.money.dao.Mon_ExchangeDao" >

    <sql id="baseExchange">
        select @RNUM := @RNUM + 1 as rowNum,
               basic.mem_no,
               basic.mem_id,
               basic.mem_name,
               basic.mem_nick,
               basic.mem_state,
               basic.mem_phone,
               exchange.idx,
               exchange.byeol,
               exchange.cash_basic,
               exchange.income_tax,
               exchange.resident_tax,
               exchange.transfer_fee,
               exchange.benefit,
               exchange.cash_real,
               exchange.account_name,
               exchange.bank_code,
               exchange.account_no,
               exchange.social_no,
               exchange.phone_no,
               exchange.address_1,
               exchange.address_2,
               exchange.add_file1,
               exchange.add_file2,
               exchange.terms_agree,
               exchange.os_type,
               exchange.ip,
               exchange.confirm,
               exchange.state,
               exchange.op_msg,
               exchange.op_name,
               exchange.op_date,
               exchange.reg_date,
               exchange.last_upd_date,
               wallet.gold
        from rd_data.tb_member_exchange exchange
            inner join rd_data.tb_member_profile profile on exchange.mem_no = profile.mem_no
            inner join rd_data.tb_member_wallet wallet on exchange.mem_no = wallet.mem_no
            left join rd_admin.tb_special_dj special on exchange.mem_no = special.mem_no and special.select_year = #{search_year} and special.select_month = #{search_month}
            left join rd_data.tb_member_basic basic on exchange.mem_no = basic.mem_no
            , (select @RNUM := 0) r
        where concat(#{search_year}, #{search_month}) = DATE_FORMAT(exchange.reg_date, '%Y%m')
            <choose>
                <when test="isSpecial == 0">
                    and special.mem_no is null
                </when>
                <when test="isSpecial == 1">
                    and special.mem_no is not null
                </when>
            </choose>

            <if test='search_value != null and search_value != ""'>
                <choose>
                    <when test="search_type == 'mem_no'">
                        and exchange.mem_no like CONCAT('%',#{search_value},'%')
                    </when>
                    <when test="search_type == 'user_id'">
                        and basic.mem_id like CONCAT('%',#{search_value},'%')
                    </when>
                    <when test="search_type == 'mem_nick'">
                        and basic.mem_nick like CONCAT('%',#{search_value},'%')
                    </when>
                    <when test="search_type == 'mem_phone'">
                        and exchange.phone_no like CONCAT('%',#{search_value},'%')
                    </when>
                    <otherwise>
                        and (
                            exchange.mem_no like CONCAT('%',#{search_value},'%')
                            or basic.mem_id like CONCAT('%',#{search_value},'%')
                            or basic.mem_nick like CONCAT('%',#{search_value},'%')
                            or exchange.phone_no like CONCAT('%',#{search_value},'%')
                        )
                    </otherwise>
                </choose>
            </if>


            <if test='search_state != null and search_state != ""'>
                and exchange.state = #{search_state}
            </if>

            <if test='idx != null and idx != 0'>
                and exchange.idx = #{idx}
            </if>

            <if test='excelYn == "Y" and limitDay != ""'>
                and DATE_FORMAT(exchange.reg_date, '%Y%m%d') <![CDATA[<]]> #{limitDay}
            </if>

            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
        order by exchange.reg_date desc
    </sql>

    <select id="selectExchangeList" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - selectExchangeList */
        select
            rowNum
            , mem_no
            , mem_id
            , mem_name
            , mem_nick
            , mem_state
            , mem_phone
            , idx
            , byeol
            , cash_basic
            , income_tax
            , resident_tax
            , transfer_fee
            , benefit
            , cash_real
            , account_name
            , bank_code
            , account_no
            , social_no
            , phone_no
            , address_1
            , address_2
            , add_file1
            , add_file2
            , terms_agree
            , os_type
            , ip
            , confirm
            , state
            , op_msg
            , op_name
            , op_date
            , reg_date
            , last_upd_date
            , gold
            , ifnull(exchangeCnt, 0) exchangeCnt
            , ifnull(totalCashBasic, 0) totalCashBasic
            , ifnull(totalCashReal, 0) totalCashReal
        from (
            <include refid="baseExchange" />
        ) a
        left join
        (
            select
            mem_no memNo
            , count(mem_no) exchangeCnt
            , sum(cash_basic) totalCashBasic
            , sum(cash_real) totalCashReal
            from rd_data.tb_member_exchange
            where state = 1
            group by mem_no
        ) summary on a.mem_no = summary.memNo

        <if test='excelYn != "Y"'>
            where rowNum between #{searchStartNo, jdbcType=INTEGER} and #{searchEndNo, jdbcType=INTEGER}
        </if>

    </select>

    <select id="selectExchangeCnt" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="int">
        /* Mon_Exchange.xml - selectExchangeCnt */
        select count(*)
        from (
            <include refid="baseExchange" />
        ) a
    </select>

    <select id="selectExchangeDetail" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - selectExchangeDetail */
        select *
        from (
            <include refid="baseExchange" />
        ) a
    </select>

    <select id="selectSummaryInfo" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="int">
        /* Mon_Exchange.xml - selectSummaryInfo */
        -- 미처리 건 수
        select ifnull(sum(cnt), 0) cnt
        from (
            select 1 cnt
            from rd_data.tb_member_exchange exchange
                left join rd_admin.tb_special_dj special
                on exchange.mem_no = special.mem_no
                    and special.select_year = #{search_year}
                    and special.select_month = #{search_month}
                left join rd_data.tb_member_basic basic
                on exchange.mem_no = basic.mem_no
            where DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
            and exchange.state = 0
            <choose>
                <when test="isSpecial == 0">
                    and special.mem_no is null
                </when>
                <when test="isSpecial == 1">
                    and special.mem_no is not null
                </when>
            </choose>
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
            group by exchange.mem_no
         )a

        union all
        -- 미처리 신청금액
        select ifnull(sum(cash_basic), 0) cash_basic
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        and special.select_year = #{search_year}
        and special.select_month = #{search_month}
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        where DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
        and exchange.state = 0
        <choose>
            <when test="isSpecial == 0">
                and special.mem_no is null
            </when>
            <when test="isSpecial == 1">
                and special.mem_no is not null
            </when>
        </choose>
        <if test='search_testId == 1'>
            and basic.inner = 0
        </if>

        union all
        -- 미처리 신청 별 수
        select ifnull(sum(byeol), 0) byeol
        from rd_data.tb_member_exchange exchange
            left join rd_admin.tb_special_dj special
                on exchange.mem_no = special.mem_no
                    and special.select_year = #{search_year}
                    and special.select_month = #{search_month}
            left join rd_data.tb_member_basic basic
            on exchange.mem_no = basic.mem_no
        where DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
        and exchange.state = 0
        <choose>
            <when test="isSpecial == 0">
                and special.mem_no is null
            </when>
            <when test="isSpecial == 1">
                and special.mem_no is not null
            </when>
        </choose>
        <if test='search_testId == 1'>
            and basic.inner = 0
        </if>
            /*and exchange.state = 1*/

        union all
        -- 처리완료 건 수
        select ifnull(sum(cnt), 0) cnt
        from (
            select 1 cnt
            from rd_data.tb_member_exchange exchange
            left join rd_admin.tb_special_dj special
                on exchange.mem_no = special.mem_no
                    and special.select_year = #{search_year}
                    and special.select_month = #{search_month}
            left join rd_data.tb_member_basic basic
                on exchange.mem_no = basic.mem_no
        where DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
            and exchange.state = 1
            <choose>
                <when test="isSpecial == 0">
                    and special.mem_no is null
                </when>
                <when test="isSpecial == 1">
                    and special.mem_no is not null
                </when>
            </choose>
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
            group by exchange.mem_no
        )a

        union all
        -- 처리완료 금액
        select ifnull(sum(cash_basic), 0) cash_basic
        from rd_data.tb_member_exchange exchange
            left join rd_admin.tb_special_dj special
                on exchange.mem_no = special.mem_no
                    and special.select_year = #{search_year}
                    and special.select_month = #{search_month}
            left join rd_data.tb_member_basic basic
                on exchange.mem_no = basic.mem_no
        where DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
            and exchange.state = 1
            <choose>
                <when test="isSpecial == 0">
                    and special.mem_no is null
                </when>
                <when test="isSpecial == 1">
                    and special.mem_no is not null
                </when>
            </choose>
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>

        union all
        -- 처리완료 별 수
        select ifnull(sum(byeol), 0) byeol
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        and special.select_year = #{search_year}
        and special.select_month = #{search_month}
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        where DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
        and exchange.state = 1
        <choose>
            <when test="isSpecial == 0">
                and special.mem_no is null
            </when>
            <when test="isSpecial == 1">
                and special.mem_no is not null
            </when>
        </choose>
        <if test='search_testId == 1'>
            and basic.inner = 0
        </if>

        union all
        -- 불가 건 수
        select ifnull(sum(cnt), 0) cnt
        from (
        select 1 cnt
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        and special.select_year = #{search_year}
        and special.select_month = #{search_month}
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        where DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
        and exchange.state = 2
        <choose>
            <when test="isSpecial == 0">
                and special.mem_no is null
            </when>
            <when test="isSpecial == 1">
                and special.mem_no is not null
            </when>
        </choose>
        <if test='search_testId == 1'>
            and basic.inner = 0
        </if>
        group by exchange.mem_no
        )a

        union all
        -- 불가처리 금액
        select ifnull(sum(cash_basic), 0) cash_basic
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        and special.select_year = #{search_year}
        and special.select_month = #{search_month}
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        where DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
        and exchange.state = 2
        <choose>
            <when test="isSpecial == 0">
                and special.mem_no is null
            </when>
            <when test="isSpecial == 1">
                and special.mem_no is not null
            </when>
        </choose>
        <if test='search_testId == 1'>
            and basic.inner = 0
        </if>

        union all
        -- 불가 별 수
        select ifnull(sum(byeol), 0) byeol
        from rd_data.tb_member_exchange exchange
            left join rd_admin.tb_special_dj special
                on exchange.mem_no = special.mem_no
                    and special.select_year = #{search_year}
                    and special.select_month = #{search_month}
            left join rd_data.tb_member_basic basic
            on exchange.mem_no = basic.mem_no
        where DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
            and exchange.state = 2
            <choose>
                <when test="isSpecial == 0">
                    and special.mem_no is null
                </when>
                <when test="isSpecial == 1">
                    and special.mem_no is not null
                </when>
            </choose>
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
    </select>

    <sql id="baseUpdateColumn">
        bank_code = #{bank_code}
        , account_name = #{account_name}
        , account_no = #{account_no}
        , social_no = #{social_no}
        , address_1 = #{address_1}
        , address_2 = #{address_2}
        , op_msg = #{op_msg}
        , op_name = #{op_name}
        , last_upd_date = now()
    </sql>

    <update id="updateExchangeDetail" parameterType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - updateExchangeDetail */
        update rd_data.tb_member_exchange
        set <include refid="baseUpdateColumn" />
        where idx = #{idx}
    </update>

    <update id="updateExchangeComplete" parameterType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - updateExchangeComplete */
        update rd_data.tb_member_exchange
        set <include refid="baseUpdateColumn" />
            , state = #{state}
            , op_date = now()
        where idx = #{idx}
    </update>

    <update id="updateExchangeMultiComplete" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo">
        /* Mon_Exchange.xml - updateExchangeMultiComplete */
        update rd_data.tb_member_exchange
        set op_name = #{opName}
            , state = #{state}
            , op_date = now()
        where idx in
            <foreach collection="idxArr" item="idx" separator="," open="(" close=")">
                #{idx}
            </foreach>
    </update>

    <select id="callExchangeCancel" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        call rd_data.sp_member_exchange_cancel(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

</mapper>