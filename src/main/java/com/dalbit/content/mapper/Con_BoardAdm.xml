<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalbit.content.dao.Con_BoardAdmDao" >

    <sql id="fanBoardCondition">
        <where>
          <if test='txt_search != null and txt_search != ""'>
              (select mem_no from rd_data.tb_member_basic where mem_no = fan.mem_no) like concat ('%',#{txt_search},'%')
              or (select mem_userid from rd_data.tb_member_basic where mem_no = fan.mem_no) like concat ('%',#{txt_search},'%')
              or (select mem_nick from rd_data.tb_member_basic where mem_no = fan.mem_no) like concat ('%',#{txt_search},'%')
              or (select mem_no from rd_data.tb_member_basic where mem_no = fan.writer_no) like concat ('%',#{txt_search},'%')
              or (select mem_userid from rd_data.tb_member_basic where mem_no = fan.writer_no) like concat ('%',#{txt_search},'%')
              or (select mem_nick from rd_data.tb_member_basic where mem_no = fan.writer_no) like concat ('%',#{txt_search},'%')
          </if>
          <if test='start_sel != null and start_sel != ""'>
              and fan.last_upd_date <![CDATA[>=]]> DATE_FORMAT(#{start_sel}, '%Y.%m.%d 00:00:00')
          </if>
          <if test='end_sel != null and end_sel != ""'>
              and fan.last_upd_date <![CDATA[<=]]> DATE_FORMAT(#{end_sel}, '%Y.%m.%d 23:59:59')
          </if>
          <if test='searchType == "2" '>    <!-- 비밀글만 보기 -->
              and fan.view_yn = 0
          </if>
          <if test='searchType == "3" '>    <!-- 삭제글만 보기 -->
              and fan.`status` = 2
          </if>
          and fan.depth = 1
        </where>
    </sql>

    <select id="selectFanBoardList" parameterType="com.dalbit.content.vo.BoardAdmFanBoardVo" resultType="com.dalbit.content.vo.BoardAdmFanBoardVo">
        select *
          from (
            select
                fan.idx
                , fan.board_no
                , (select pro.image_profile from rd_data.tb_member_profile pro where pro.mem_no = fan.mem_no) as star_image_profile
                , fan.mem_no as star_mem_no
                , ifnull(member.mem_userid, withdrawal_member.mem_userid) as star_userid
                , ifnull(member.mem_nick, withdrawal_member.mem_nick) as star_mem_nick
                , ifnull(member.mem_state, withdrawal_member.mem_state) as star_mem_state
                , ifnull(member.mem_sex, withdrawal_member.mem_sex) as star_mem_sex
                , ifnull(member.mem_birth_year, withdrawal_member.mem_birth_year) as star_birth_year

                , (select pro.image_profile from rd_data.tb_member_profile pro where pro.mem_no = fan.writer_no) as fan_image_profile
                , fan.writer_no as fan_mem_no
                , ifnull(writer_member.mem_userid, writer_withdrawal_member.mem_userid)  as fan_userid
                , ifnull(writer_member.mem_nick, writer_withdrawal_member.mem_nick) as fan_mem_nick
                , ifnull(writer_member.mem_state, writer_withdrawal_member.mem_state) as fan_mem_state
                , ifnull(writer_member.mem_sex, writer_withdrawal_member.mem_sex) as fan_mem_sex
                , ifnull(writer_member.mem_birth_year, writer_withdrawal_member.mem_birth_year) as fan_birth_year
                , fan.status
                , fan.last_upd_date
                , fan.contents
                , fan.view_yn
                , fan.depth
                , ifnull(fan.opName,'') as opName
                , (select count(*) from rd_data.tb_member_fanboard WHERE mem_no =  fan.mem_no and `status` = 1 AND board_no = fan.board_no AND depth = 2 ) as replyCnt
                , @RNUM := @RNUM +1 as rowNum
            from rd_data.tb_member_fanboard fan
                inner join (select @RNUM := 0) r
                left outer join rd_data.tb_member_basic member on fan.mem_no = member.mem_no
                left outer join rd_data.tb_member_withdrawal_bak withdrawal_member on fan.mem_no = withdrawal_member.mem_no
                left outer join rd_data.tb_member_basic writer_member on fan.writer_no = writer_member.mem_no
                left outer join rd_data.tb_member_withdrawal_bak writer_withdrawal_member on fan.writer_no = writer_withdrawal_member.mem_no
                <include refid="fanBoardCondition"/>
        <if test='searchType == "1" '>    <!-- 댓글 많은 수 부터 보기 -->
            order by replyCnt desc
        </if>
        <if test='searchType != "1" '>    <!-- 최근 등록 순으로 보기 -->
            order by fan.idx desc
        </if>
        ) a
        where rowNum between #{searchStartNo, jdbcType=INTEGER} and #{searchEndNo, jdbcType=INTEGER}
    </select>

    <select id="selectFanBoardListCnt" parameterType="com.dalbit.content.vo.BoardAdmFanBoardVo" resultType="integer">
      select
        count(*)
      from rd_data.tb_member_fanboard fan
        <include refid="fanBoardCondition"/>
    </select>

    <!-- 팬보드 통계 -->
    <select id="selectFanBoardSummary" parameterType="com.dalbit.content.vo.BoardAdmFanBoardVo" resultType="com.dalbit.content.vo.BoardAdmFanBoardVo">
      select totalCnt,(totalCnt/datediff) as avgTotalCnt,  totalDelCnt, (totalDelCnt/datediff) as avgTotalDelCnt, maleCnt, femaleCnt, noneCnt, type, datediff
          from (
        select count(*) as totalCnt
                , sum(if(view_yn=0,1,0)) as totalDelCnt
                , sum(if((select mem_sex From rd_data.tb_member_basic where mem_no = fan.mem_no) = 'm', 1, 0)) as maleCnt
                , sum(if((select mem_sex From rd_data.tb_member_basic where mem_no = fan.mem_no) = 'f', 1, 0)) as femaleCnt
                , sum(if((select mem_sex From rd_data.tb_member_basic where mem_no = fan.mem_no) = 'n', 1, 0)) as noneCnt
                , DATEDIFF(DATE_FORMAT(#{end_sel}, '%Y.%m.%d 23:59:59'),DATE_FORMAT(#{start_sel}, '%Y.%m.%d 00:00:00')) as datediff
                , 'nomal' as type
        from rd_data.tb_member_fanboard fan
        <include refid="fanBoardCondition"/>
        union
        select count(*) as totalCnt
                , sum(if(view_yn=0,1,0)) as totalDelCnt
                , sum(if((select mem_sex From rd_data.tb_member_basic where mem_no = fan.mem_no) = 'm', 1, 0)) as maleCnt
                , sum(if((select mem_sex From rd_data.tb_member_basic where mem_no = fan.mem_no) = 'f', 1, 0)) as femaleCnt
                , sum(if((select mem_sex From rd_data.tb_member_basic where mem_no = fan.mem_no) = 'n', 1, 0)) as noneCnt
                , DATEDIFF(DATE_FORMAT(#{end_sel}, '%Y.%m.%d 23:59:59'),DATE_FORMAT(#{start_sel}, '%Y.%m.%d 00:00:00')) as datediff
                , 'del' as type
        From rd_data.tb_member_fanboard fan
        <include refid="fanBoardCondition"/>
         and status='2'
        ) a
    </select>

    <update id="deleteFanBoard">
        update rd_data.tb_member_fanboard
        set `status` = 2, opName = #{opName}
        where idx = #{idx}
    </update>

    <select id="selectReply" parameterType="com.dalbit.content.vo.BoardAdmFanBoardReplyVo" resultType="com.dalbit.content.vo.BoardAdmFanBoardReplyVo">
        SELECT
              a.idx AS board_idx,
              a.board_no AS board_no,
              a.writer_no AS writer_mem_no,
              ifnull(bas.mem_nick, bak.mem_nick) AS nickName,
              ifnull(bas.mem_userid, bak.mem_userid) as userId,
              ifnull(bas.mem_sex, bak.mem_sex) AS memSex,
              ifnull(bas.mem_birth_year, bak.mem_birth_year) as mem_birth_year,
              ( SELECT image_profile FROM rd_data.tb_member_profile WHERE mem_no = a.writer_no ) AS profileImage,
              a.contents AS contents,
              a.`status` AS `status`,
              a.last_upd_date AS writeDate,
              a.view_yn,
              depth
         from (select idx, board_no, contents, writer_no, `status`, last_upd_date, depth,view_yn from rd_data.tb_member_fanboard where mem_no = #{mem_no} and board_no = #{board_no} and `status` = 1) as a
          left outer join rd_data.tb_member_basic bas on a.writer_no = bas.mem_no
          left outer join rd_data.tb_member_withdrawal_bak bak on a.writer_no = bak.mem_no
          order by writeDate desc
    </select>

    <sql id="storyCondition">
        <where>
            <if test='txt_search != null and txt_search != ""'>
                (bas.mem_no like CONCAT('%',#{txt_search},'%') or sto.writer_no like CONCAT('%', #{txt_search}, '%')
                OR bas.mem_userid like CONCAT('%',#{txt_search},'%') or sto.mem_userid like CONCAT('%', #{txt_search}, '%')
                OR bas.mem_nick like CONCAT('%',#{txt_search},'%') or sto.mem_nick like CONCAT('%', #{txt_search}, '%'))
            </if>
            <if test='start_sel != null and start_sel !=""'>
                 and sto.write_date <![CDATA[>=]]> DATE_FORMAT(#{start_sel}, '%Y.%m.%d 00:00:00')
            </if>
            <if test='end_sel != null and end_sel != ""'>
                 and sto.write_date <![CDATA[<=]]> DATE_FORMAT(#{end_sel}, '%Y.%m.%d 23:59:59')
            </if>
        </where>
    </sql>

    <select id="selectStoryList" parameterType="com.dalbit.content.vo.BoardAdmStoryVo" resultType="com.dalbit.content.vo.BoardAdmStoryVo">
    /* Con_BoardAdm.xml - selectStoryList*/
        select
          a.*
        from (
            select
            sto.idx as storyIdx,
            sto.room_no as room_no,
            sto.status as status,
            bas.mem_no     as dj_mem_no,
            bas.mem_nick   as dj_mem_nick,
            bas.mem_userid as dj_mem_userid,
            bas.mem_sex    as dj_mem_sex,
            bas.mem_birth_year as dj_birth_year,
            bro.title      as title,
            bro.state      as broState,
            sto.mem_nick   as send_mem_nick,
            sto.mem_userid as send_mem_userid,
            sto.mem_sex    as send_mem_sex,
            sto.writer_no as send_mem_no,
            (select bas.mem_birth_year
            from rd_data.tb_broadcast_room_story sto inner join rd_data.tb_member_basic bas on sto.writer_no = bas.mem_no
            where bas.mem_no = send_mem_no group by bas.mem_no) as send_birth_year,
            sto.write_date as send_date,
            sto.contents   as story_content,
            (select count(*) from rd_data.tb_broadcast_room_story where room_no in (select room_no from rd_data.tb_broadcast_room where mem_no = bas.mem_no)) as storyCnt,
            (select count(*) from rd_data.tb_broadcast_room_story where writer_no=sto.writer_no) as sendStoryCnt,
            @RNUM := @RNUM + 1 as rowNum
        from rd_data.tb_broadcast_room bro
        inner join rd_data.tb_broadcast_room_story sto on sto.room_no = bro.room_no
        inner join rd_data.tb_member_basic bas on bro.mem_no = bas.mem_no
        , (select @RNUM := 0) r
        <include refid="storyCondition"/>
        <if test="searchType == 0">
          order by sto.idx desc
        </if>
        <if test="searchType == 1">
            order by storyCnt desc
        </if>
        <if test="searchType == 2">
            order by sendStoryCnt desc
        </if>
        <if test="searchType == 3">
          order by sto.idx asc
        </if>
        ) a
        where rowNum between #{searchStartNo, jdbcType=INTEGER} and #{searchEndNo, jdbcType=INTEGER}
    </select>

    <select id="selectStoryListCnt" parameterType="com.dalbit.content.vo.BoardAdmStoryVo" resultType="integer">
      /* Con_BoardAdm.xml - selectStoryListCnt*/
      select
        count(*)
      from rd_data.tb_broadcast_room bro
              inner join rd_data.tb_broadcast_room_story sto on sto.room_no = bro.room_no
              inner join rd_data.tb_member_basic bas on bro.mem_no = bas.mem_no
        <include refid="storyCondition"/>
    </select>

    <!--<select id="callStoryDelete" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">-->
        <!--/* Con_BoardAdm.xml - callStoryDelete */-->
        <!--call rd_admin.sp_admin_broadcast_room_story_delete(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
    <!--</select>-->

    <update id="callStoryDelete" parameterType="string">
        /* Con_BoardAdm.xml - callStoryDelete */
        update rd_data.tb_broadcast_room_story set `status`=1 where idx=#{storyIdx}
    </update>

</mapper>