<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalbit.member.dao.Mem_MemberDao" >

    <select id="callMemberLogin" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        call rd_data.sp_member_login(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberListOutputVo">
        /* M_Member.xml - callMemberList */
        <!--call rd_admin.sp_admin_member_search(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
        call rd_admin.sp_admin_member_all_search(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberInfo" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberInfo */
        <!--call rd_admin.sp_admin_member_info_detail(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
        call rd_admin.sp_admin_member_all_info_detail(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberCertification" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberCertification */
        select comm_company from rd_data.tb_member_certification where mem_no=#{mem_no}
    </select>

    <select id="callMemberBlock" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberBlock */
        select block_day,block_end_date From rd_data.tb_member_basic where mem_no=#{mem_no}
         union
        select block_day,block_end_date From rd_data.tb_member_withdrawal_bak where mem_no=#{mem_no}
    </select>

    <select id="callNickNameCheck" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        /* M_Member.xml - callNickNameCheck */
      call rd_data.sp_checkDuplicateNickName(#{nickName, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberEditHistory" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberEditHistOutputVo">
        /* M_Member.xml - callMemberEditHistory */
        <!--call rd_admin.sp_admin_member_info_edit_history(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
        call rd_admin.sp_admin_member_all_info_edit_history(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberEditor" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        /* M_Member.xml - callMemberEditor */
        call rd_admin.sp_admin_member_info_edit(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberSocialIdCheck" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo" resultType="integer">
        /* M_Member.xml - callMemberEditor */
        select count(*) as cnt from rd_data.tb_member_basic where upper(mem_id)=upper(#{socialId})
        union
        select count(*) as cnt from rd_data.tb_member_withdrawal_bak where upper(mem_id)=upper(#{socialId})
    </select>

    <update id="callMemberSocialIdEditor" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberSocialIdEditor */
        update rd_data.tb_member_basic set mem_id=#{socialId} where mem_no=#{mem_no}
    </update>
    <insert id="callMemberEditHistoryAdd" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberEditHistoryAdd */
        insert into rd_data.tb_member_profile_edit_history( mem_no, edit_contents,state, op_name, last_upd_date ) values ( #{mem_no}, #{editContents},'2', #{opName}, now())
    </insert>

    <!-- 회원상태 정상 변경 -->
    <update id="callMemberStateEditor" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberStateEditor */
        update rd_data.tb_member_basic set mem_state=1, block_day=0, block_end_date=null where mem_no=#{mem_no}
    </update>
    <delete id="callMemberWithdrawal_del" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberWithdrawal_del */
        delete From rd_data.tb_member_withdrawal where mem_no=#{mem_no}
    </delete>
    <insert id="callMemberBasicAdd" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberBasicAdd */
        insert into rd_data.tb_member_basic (select * from rd_data.tb_member_withdrawal_bak where mem_no=#{mem_no})
    </insert>
    <delete id="callMemberWithdrawal_bak_del" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberWithdrawal_bak_del */
        delete From rd_data.tb_member_withdrawal_bak where mem_no=#{mem_no}
    </delete>
    <!-- 회원상태 정상 변경 -->


    <!-- 정지/탈퇴 (신고) -->
    <insert id="callMemberReport" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberReport */
        insert into rd_data.tb_member_report
                      (mem_no,mem_userid,mem_nick,mem_phone,mem_level,mem_grade,reported_mem_no,reported_userid,
                      reported_nick,reported_phone,reported_level,reported_grade,room_no,reason,etc,status,op_code,
                      op_msg,platform,browser,ip,op_name,op_date,reg_date)
         value (#{mem_no},#{mem_userid},#{mem_nick},'',1,'',#{reported_mem_no},#{reported_userid},
                #{reported_nick},#{reported_phone},#{reported_level},#{reported_grade},null,1,null,'2',#{slctType},
                '','PC',#{browser},#{ip},#{opName},now(),now())
    </insert>

    <select id="callMemberListen_check" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo" resultType="integer">
        /* M_Member.xml - callMemberEditor */
        select count(*) as cnt from rd_data.tb_broadcast_room_member where mem_no = #{mem_no} and state = 0

    </select>
    <update id="callMemberBasicReport_Edit" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberBasicReport_Edit */
        update rd_data.tb_member_basic
          <if test='slctType lt 3'>                      <!-- <  -->
              set mem_state = #{slctType}
          </if>
          <if test="slctType gt 2 and slctType lt 6">    <!--  >   <  -->
              set mem_state = 3,
                  block_day = #{blockDay},
                  block_end_date = DATE_ADD( now(), interval #{blockDay} day)
          </if>
          <if test="slctType == 6">
              set mem_state = 5
          </if>
          <if test="slctType == 7">
              set mem_state = 4
          </if>
        where mem_no = #{reported_mem_no}
    </update>
    <insert id="callMemberWithdrawal_Add" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberWithdrawal_Add */
        insert into rd_data.tb_member_withdrawal( mem_no, state, op_name) values ( #{reported_mem_no}, 2, #{opName})
    </insert>
    <insert id="callMemberNotification_Add" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberNotification_Add */
        insert into rd_data.tb_member_notification( mem_no, type_noti, contents, memo  ) values ( #{reported_mem_no}, 7, #{notiContents}, #{notimemo})
    </insert>
    <insert id="callMemberWithdrawal_bak_Add" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberBasicAdd */
        insert into rd_data.tb_member_withdrawal_bak (select * from rd_data.tb_member_basic where mem_no=#{reported_mem_no})
    </insert>
    <delete id="callMemberBasic_del" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberWithdrawal_bak_del */
        delete From rd_data.tb_member_basic where mem_no=#{reported_mem_no}
    </delete>
    <delete id="callMemberWithdrawal_fanDel" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberWithdrawal_fanDel */
        delete FROM rd_data.tb_member_fanstar WHERE mem_no_fan = #{reported_mem_no}
    </delete>
    <delete id="callMemberWithdrawal_starDel" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberWithdrawal_starDel */
        delete FROM rd_data.tb_member_fanstar WHERE mem_no_star = #{reported_mem_no}
    </delete>
    <!-- 정지/탈퇴 (신고) -->


    <!-- 자세히보기 -->
    <select id="callMemAdminMemoAdd" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        /* M_Member.xml - callMemberAdminMemoAdd */
        call rd_admin.sp_admin_op_memo_add(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>
    <select id="callMemAdminMemoList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberAdminMemoListOutputVo">
        /* M_Member.xml - callMemAdminMemoList */
        call rd_admin.sp_admin_op_memo_select(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>
    <select id="callMemConnect" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberConnectOutputVo">
        /* M_Member.xml - callMemConnect */
        <!--call rd_admin.sp_admin_member_info_connect(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
        call rd_admin.sp_admin_member_all_info_connect(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemConnect_deviceToken" parameterType="com.dalbit.member.vo.procedure.P_MemberConnectInputVo" resultType="String">
        /* M_Member.xml - callMemConnect_deviceToken */
        SELECT device_token FROM rd_data.tb_member_session_history where mem_no=#{mem_no} and LENGTH(device_token) > 100 ORDER BY last_upd_date DESC LIMIT 1
    </select>

    <select id="callMemManagerList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberManagerListOutputVo">
        /* M_Member.xml - callMemManagerList */
        <!--call rd_admin.sp_admin_member_info_manager(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
        call rd_admin.sp_admin_member_all_info_manager(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>
    <select id="callMemBlackList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberBlackListOutputVo">
        /* M_Member.xml - callMemBlackList */
        <!--call rd_admin.sp_admin_member_info_black(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
        call rd_admin.sp_admin_member_all_info_black(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>
</mapper>
